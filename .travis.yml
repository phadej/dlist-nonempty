# This Travis job script has been generated by a script via
#
#   runghc make_travis_yml_2.hs '--branch' 'master' '--output' '.travis.yml' 'dlist-nonempty.cabal'
#
# For more information, see https://github.com/hvr/multi-ghc-travis
#
language: c
sudo: false

git:
  submodules: false  # whether to recursively clone submodules

branches:
  only:
    - master

cache:
  directories:
    - $HOME/.cabal/packages
    - $HOME/.cabal/store

env:
  global:
    secure: "HwtOmKvjixmMPtjRcBJb3bsbxfwZUW4f3aVS5394ntgv4BKIsFOC51hyU34JlMq7mh+j8DxIWKj3XQXyk05eXuSFt8ln83nYEmlWLwCg3QTkBx7SamjcLfR/E0YcyWo8GmjESc/5rv+f3Sjzdmy9yhr/z1zg/8913rPLebi0ykPlSUOq7s7WV7HK69qSWWlV1N7Nde4SzvrzzzkypG8byT0ygku8U3lfk7g825RfhDgBse/90sCz8Fh/623lYuSjuO3Y7krWcEDHGFSNccO9/t2H69nowmHYRnJKBxwvZcOZTpMqKLWA7V9d2W56L3JJDw8lj2+ynEFZcSrvRwvQXsilD6FISkpH/w7MzV0krx2OjZrSlQeg8yUXuuxR3bHEkw3Dqr5uOY+dGotgE9ptHkjQPmGEF0TwLYaDISxBajB3wNI1F3uiHOlRGZ8GfaJwxRxbSyJL+KbIUPAn8yNrDj9blOUWyd8s3aFY6tGbycz7ZeeSQcntBYPlMhbeqbV/srFB7M7YT7pHx3WRzGnuWXBvrdGc67LucfGhbkb3YvWB87aMGQLdBQyIdJ45zpwZUyBTYuMDPCuPwAzyd+JficDasrYZC7BcX/kdNu0jIRxJXjRuOsCMVYTQ9SjQhSm4aFmNh76j8+ckZ3l9m1MRE1d1sofHNGU2dvRfj+CeHWE="

before_cache:
  - rm -fv $HOME/.cabal/packages/hackage.haskell.org/build-reports.log
  # remove files that are regenerated by 'cabal update'
  - rm -fv $HOME/.cabal/packages/hackage.haskell.org/00-index.*
  - rm -fv $HOME/.cabal/packages/hackage.haskell.org/*.json
  - rm -fv $HOME/.cabal/packages/hackage.haskell.org/01-index.cache
  - rm -fv $HOME/.cabal/packages/hackage.haskell.org/01-index.tar
  - rm -fv $HOME/.cabal/packages/hackage.haskell.org/01-index.tar.idx

  - rm -rfv $HOME/.cabal/packages/head.hackage

matrix:
  include:
    - compiler: "ghc-8.4.3"
    # env: TEST=--disable-tests BENCH=--disable-benchmarks
      addons: {apt: {packages: [ghc-ppa-tools,cabal-install-2.2,ghc-8.4.3], sources: [hvr-ghc]}}
    - compiler: "ghc-8.2.2"
    # env: TEST=--disable-tests BENCH=--disable-benchmarks
      addons: {apt: {packages: [ghc-ppa-tools,cabal-install-2.2,ghc-8.2.2], sources: [hvr-ghc]}}
    - compiler: "ghc-8.0.2"
    # env: TEST=--disable-tests BENCH=--disable-benchmarks
      addons: {apt: {packages: [ghc-ppa-tools,cabal-install-2.2,ghc-8.0.2], sources: [hvr-ghc]}}
    - compiler: "ghc-7.10.3"
    # env: TEST=--disable-tests BENCH=--disable-benchmarks
      addons: {apt: {packages: [ghc-ppa-tools,cabal-install-2.2,ghc-7.10.3], sources: [hvr-ghc]}}
    - compiler: "ghc-7.8.4"
    # env: TEST=--disable-tests BENCH=--disable-benchmarks
      addons: {apt: {packages: [ghc-ppa-tools,cabal-install-2.2,ghc-7.8.4], sources: [hvr-ghc]}}
    - compiler: "ghc-7.6.3"
    # env: TEST=--disable-tests BENCH=--disable-benchmarks
      addons: {apt: {packages: [ghc-ppa-tools,cabal-install-2.2,ghc-7.6.3], sources: [hvr-ghc]}}
    - compiler: "ghc-7.4.2"
    # env: TEST=--disable-tests BENCH=--disable-benchmarks
      addons: {apt: {packages: [ghc-ppa-tools,cabal-install-2.2,ghc-7.4.2], sources: [hvr-ghc]}}

before_install:
  - HC=${CC}
  - HCPKG=${HC/ghc/ghc-pkg}
  - unset CC
  - ROOTDIR=$(pwd)
  - mkdir -p $HOME/.local/bin
  - "PATH=/opt/ghc/bin:/opt/ghc-ppa-tools/bin:$HOME/local/bin:$PATH"
  - HCNUMVER=$(( $(${HC} --numeric-version|sed -E 's/([0-9]+)\.([0-9]+)\.([0-9]+).*/\1 * 10000 + \2 * 100 + \3/') ))
  - echo $HCNUMVER
  - gcc --version
  - uname -a
  - id
  - lsb_release -a

install:
  - cabal --version
  - echo "$(${HC} --version) [$(${HC} --print-project-git-commit-id 2> /dev/null || echo '?')]"
  - BENCH=${BENCH---enable-benchmarks}
  - TEST=${TEST---enable-tests}
  - HADDOCK=${HADDOCK-true}
  - UNCONSTRAINED=${UNCONSTRAINED-true}
  - NOINSTALLEDCONSTRAINTS=${NOINSTALLEDCONSTRAINTS-false}
  - GHCHEAD=${GHCHEAD-false}

  # - curl -O "https://d3inh5negllkw3.cloudfront.net/haskell-ci-cacher.xz"
  - curl -O "http://oleg.fi/haskell-ci-cacher.xz"
  # - curl -O "https://d3inh5negllkw3.cloudfront.net/haskell-ci-cacher.xz.sig"
  # - gpg2 --keyserver hkps://hkps.pool.sks-keyservers.net --recv-keys 5AC89B3747FF9612810F909EEB7905A7B8BB0BA4 || true
  # - true check signature
  - cat  haskell-ci-cacher.xz | xz --decompress > ${HOME}/.local/bin/haskell-ci-cacher
  - chmod a+x ${HOME}/.local/bin/haskell-ci-cacher

  - travis_retry cabal update -v
  - "sed -i.bak 's/^jobs:/-- jobs:/' ${HOME}/.cabal/config"
  - rm -fv cabal.project cabal.project.local
  - grep -Ev -- '^\s*--' ${HOME}/.cabal/config | grep -Ev '^\s*$'
  - "printf 'packages: \".\"\\n' > cabal.project"
  - touch cabal.project.local
  - "if ! $NOINSTALLEDCONSTRAINTS; then for pkg in $($HCPKG list --simple-output); do echo $pkg | sed 's/^/constraints: /' | sed 's/-[^-]*$/ installed/' >> cabal.project.local; done; fi"
  - cat cabal.project || true
  - cat cabal.project.local || true
  - if [ -f "./configure.ac" ]; then
      (cd "." && autoreconf -i);
    fi
  - rm -f cabal.project.freeze
  - cabal new-build -w ${HC} ${TEST} ${BENCH} --project-file="cabal.project" --dry -j2 all
  - haskell-ci-cacher --download
  # temp
  - rm -rf dist-newstyle
  - cabal new-build -w ${HC} --disable-tests --disable-benchmarks --project-file="cabal.project" --dry -j2 all
  - haskell-ci-cacher --download
  - rm -rf .ghc.environment.* "."/dist
  - DISTDIR=$(mktemp -d /tmp/dist-test.XXXX)

after_script:
  - haskell-ci-cacher --upload -w $HC

# Here starts the actual work to be performed for the package under test;
# any command which exits with a non-zero exit code causes the build to fail.
script:
  # test that source-distributions can be generated
  - (cd "." && cabal sdist)
  - mv "."/dist/dlist-nonempty-*.tar.gz ${DISTDIR}/
  - cd ${DISTDIR} || false
  - find . -maxdepth 1 -name '*.tar.gz' -exec tar -xvf '{}' \;
  - "printf 'packages: dlist-nonempty-*/*.cabal\\n' > cabal.project"
  - touch cabal.project.local
  - "if ! $NOINSTALLEDCONSTRAINTS; then for pkg in $($HCPKG list --simple-output); do echo $pkg | sed 's/^/constraints: /' | sed 's/-[^-]*$/ installed/' >> cabal.project.local; done; fi"
  - cat cabal.project || true
  - cat cabal.project.local || true
  # this builds all libraries and executables (without tests/benchmarks)
  - cabal new-build -w ${HC} --disable-tests --disable-benchmarks all

  # build & run tests, build benchmarks
  - cabal new-build -w ${HC} ${TEST} ${BENCH} all
  - if [ "x$TEST" = "x--enable-tests" ]; then cabal new-test -w ${HC} ${TEST} ${BENCH} all; fi

  # cabal check
  - (cd dlist-nonempty-* && cabal check)

  # haddock
  - rm -rf ./dist-newstyle
  - if $HADDOCK; then cabal new-haddock -w ${HC} ${TEST} ${BENCH} all; else echo "Skipping haddock generation";fi

  # Build without installed constraints for packages in global-db
  - if $UNCONSTRAINED; then rm -f cabal.project.local; echo cabal new-build -w ${HC} --disable-tests --disable-benchmarks all; else echo "Not building without installed constraints"; fi

# REGENDATA ["--branch","master","--output",".travis.yml","dlist-nonempty.cabal"]
# EOF
